/**
 */
package maia.collectiveStructure.provider;

import java.util.ArrayList;
import java.util.Collection;

import maia.collectiveStructure.util.CollectiveStructureAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CollectiveStructureItemProviderAdapterFactory extends CollectiveStructureAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CollectiveStructureItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link maia.collectiveStructure.Agent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AgentItemProvider agentItemProvider;

	/**
	 * This creates an adapter for a {@link maia.collectiveStructure.Agent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAgentAdapter() {
		if (agentItemProvider == null) {
			agentItemProvider = new AgentItemProvider(this);
		}

		return agentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link maia.collectiveStructure.PersonalValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersonalValueItemProvider personalValueItemProvider;

	/**
	 * This creates an adapter for a {@link maia.collectiveStructure.PersonalValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersonalValueAdapter() {
		if (personalValueItemProvider == null) {
			personalValueItemProvider = new PersonalValueItemProvider(this);
		}

		return personalValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link maia.collectiveStructure.DecisionInfluence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecisionInfluenceItemProvider decisionInfluenceItemProvider;

	/**
	 * This creates an adapter for a {@link maia.collectiveStructure.DecisionInfluence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecisionInfluenceAdapter() {
		if (decisionInfluenceItemProvider == null) {
			decisionInfluenceItemProvider = new DecisionInfluenceItemProvider(this);
		}

		return decisionInfluenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link maia.collectiveStructure.CollectiveStructure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollectiveStructureItemProvider collectiveStructureItemProvider;

	/**
	 * This creates an adapter for a {@link maia.collectiveStructure.CollectiveStructure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollectiveStructureAdapter() {
		if (collectiveStructureItemProvider == null) {
			collectiveStructureItemProvider = new CollectiveStructureItemProvider(this);
		}

		return collectiveStructureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link maia.collectiveStructure.MCDA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MCDAItemProvider mcdaItemProvider;

	/**
	 * This creates an adapter for a {@link maia.collectiveStructure.MCDA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMCDAAdapter() {
		if (mcdaItemProvider == null) {
			mcdaItemProvider = new MCDAItemProvider(this);
		}

		return mcdaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link maia.collectiveStructure.PersonalValueAspect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersonalValueAspectItemProvider personalValueAspectItemProvider;

	/**
	 * This creates an adapter for a {@link maia.collectiveStructure.PersonalValueAspect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersonalValueAspectAdapter() {
		if (personalValueAspectItemProvider == null) {
			personalValueAspectItemProvider = new PersonalValueAspectItemProvider(this);
		}

		return personalValueAspectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link maia.collectiveStructure.PropertyAspect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyAspectItemProvider propertyAspectItemProvider;

	/**
	 * This creates an adapter for a {@link maia.collectiveStructure.PropertyAspect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAspectAdapter() {
		if (propertyAspectItemProvider == null) {
			propertyAspectItemProvider = new PropertyAspectItemProvider(this);
		}

		return propertyAspectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link maia.collectiveStructure.ConditionAspect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionAspectItemProvider conditionAspectItemProvider;

	/**
	 * This creates an adapter for a {@link maia.collectiveStructure.ConditionAspect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionAspectAdapter() {
		if (conditionAspectItemProvider == null) {
			conditionAspectItemProvider = new ConditionAspectItemProvider(this);
		}

		return conditionAspectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link maia.collectiveStructure.SanctionAspect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SanctionAspectItemProvider sanctionAspectItemProvider;

	/**
	 * This creates an adapter for a {@link maia.collectiveStructure.SanctionAspect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSanctionAspectAdapter() {
		if (sanctionAspectItemProvider == null) {
			sanctionAspectItemProvider = new SanctionAspectItemProvider(this);
		}

		return sanctionAspectItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (agentItemProvider != null) agentItemProvider.dispose();
		if (personalValueItemProvider != null) personalValueItemProvider.dispose();
		if (decisionInfluenceItemProvider != null) decisionInfluenceItemProvider.dispose();
		if (collectiveStructureItemProvider != null) collectiveStructureItemProvider.dispose();
		if (mcdaItemProvider != null) mcdaItemProvider.dispose();
		if (personalValueAspectItemProvider != null) personalValueAspectItemProvider.dispose();
		if (propertyAspectItemProvider != null) propertyAspectItemProvider.dispose();
		if (conditionAspectItemProvider != null) conditionAspectItemProvider.dispose();
		if (sanctionAspectItemProvider != null) sanctionAspectItemProvider.dispose();
	}

}
