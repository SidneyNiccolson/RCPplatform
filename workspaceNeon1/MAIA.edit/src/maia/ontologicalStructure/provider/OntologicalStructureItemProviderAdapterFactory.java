/**
 */
package maia.ontologicalStructure.provider;

import java.util.ArrayList;
import java.util.Collection;

import maia.ontologicalStructure.util.OntologicalStructureAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class OntologicalStructureItemProviderAdapterFactory extends OntologicalStructureAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public OntologicalStructureItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link maia.ontologicalStructure.OntologicalStructure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalStructureItemProvider ontologicalStructureItemProvider;

	/**
	 * This creates an adapter for a {@link maia.ontologicalStructure.OntologicalStructure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalStructureAdapter() {
		if (ontologicalStructureItemProvider == null) {
			ontologicalStructureItemProvider = new OntologicalStructureItemProvider(this);
		}

		return ontologicalStructureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link maia.ontologicalStructure.OntologicalConcept} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalConceptItemProvider ontologicalConceptItemProvider;

	/**
	 * This creates an adapter for a {@link maia.ontologicalStructure.OntologicalConcept}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalConceptAdapter() {
		if (ontologicalConceptItemProvider == null) {
			ontologicalConceptItemProvider = new OntologicalConceptItemProvider(this);
		}

		return ontologicalConceptItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link maia.ontologicalStructure.NaturalLangCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NaturalLangConditionItemProvider naturalLangConditionItemProvider;

	/**
	 * This creates an adapter for a {@link maia.ontologicalStructure.NaturalLangCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNaturalLangConditionAdapter() {
		if (naturalLangConditionItemProvider == null) {
			naturalLangConditionItemProvider = new NaturalLangConditionItemProvider(this);
		}

		return naturalLangConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link maia.ontologicalStructure.Negformula} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NegformulaItemProvider negformulaItemProvider;

	/**
	 * This creates an adapter for a {@link maia.ontologicalStructure.Negformula}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNegformulaAdapter() {
		if (negformulaItemProvider == null) {
			negformulaItemProvider = new NegformulaItemProvider(this);
		}

		return negformulaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link maia.ontologicalStructure.ORformula} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ORformulaItemProvider oRformulaItemProvider;

	/**
	 * This creates an adapter for a {@link maia.ontologicalStructure.ORformula}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createORformulaAdapter() {
		if (oRformulaItemProvider == null) {
			oRformulaItemProvider = new ORformulaItemProvider(this);
		}

		return oRformulaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link maia.ontologicalStructure.ANDformula} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ANDformulaItemProvider anDformulaItemProvider;

	/**
	 * This creates an adapter for a {@link maia.ontologicalStructure.ANDformula}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createANDformulaAdapter() {
		if (anDformulaItemProvider == null) {
			anDformulaItemProvider = new ANDformulaItemProvider(this);
		}

		return anDformulaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link maia.ontologicalStructure.equalFormula} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected equalFormulaItemProvider equalFormulaItemProvider;

	/**
	 * This creates an adapter for a {@link maia.ontologicalStructure.equalFormula}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createequalFormulaAdapter() {
		if (equalFormulaItemProvider == null) {
			equalFormulaItemProvider = new equalFormulaItemProvider(this);
		}

		return equalFormulaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link maia.ontologicalStructure.moreEqformula} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected moreEqformulaItemProvider moreEqformulaItemProvider;

	/**
	 * This creates an adapter for a {@link maia.ontologicalStructure.moreEqformula}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createmoreEqformulaAdapter() {
		if (moreEqformulaItemProvider == null) {
			moreEqformulaItemProvider = new moreEqformulaItemProvider(this);
		}

		return moreEqformulaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link maia.ontologicalStructure.lessformula} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected lessformulaItemProvider lessformulaItemProvider;

	/**
	 * This creates an adapter for a {@link maia.ontologicalStructure.lessformula}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createlessformulaAdapter() {
		if (lessformulaItemProvider == null) {
			lessformulaItemProvider = new lessformulaItemProvider(this);
		}

		return lessformulaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link maia.ontologicalStructure.NumberProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumberPropertyItemProvider numberPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link maia.ontologicalStructure.NumberProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumberPropertyAdapter() {
		if (numberPropertyItemProvider == null) {
			numberPropertyItemProvider = new NumberPropertyItemProvider(this);
		}

		return numberPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link maia.ontologicalStructure.BooleanProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanPropertyItemProvider booleanPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link maia.ontologicalStructure.BooleanProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanPropertyAdapter() {
		if (booleanPropertyItemProvider == null) {
			booleanPropertyItemProvider = new BooleanPropertyItemProvider(this);
		}

		return booleanPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link maia.ontologicalStructure.StringProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringPropertyItemProvider stringPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link maia.ontologicalStructure.StringProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringPropertyAdapter() {
		if (stringPropertyItemProvider == null) {
			stringPropertyItemProvider = new StringPropertyItemProvider(this);
		}

		return stringPropertyItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (ontologicalStructureItemProvider != null) ontologicalStructureItemProvider.dispose();
		if (ontologicalConceptItemProvider != null) ontologicalConceptItemProvider.dispose();
		if (naturalLangConditionItemProvider != null) naturalLangConditionItemProvider.dispose();
		if (negformulaItemProvider != null) negformulaItemProvider.dispose();
		if (oRformulaItemProvider != null) oRformulaItemProvider.dispose();
		if (anDformulaItemProvider != null) anDformulaItemProvider.dispose();
		if (equalFormulaItemProvider != null) equalFormulaItemProvider.dispose();
		if (moreEqformulaItemProvider != null) moreEqformulaItemProvider.dispose();
		if (lessformulaItemProvider != null) lessformulaItemProvider.dispose();
		if (numberPropertyItemProvider != null) numberPropertyItemProvider.dispose();
		if (booleanPropertyItemProvider != null) booleanPropertyItemProvider.dispose();
		if (stringPropertyItemProvider != null) stringPropertyItemProvider.dispose();
	}

}
